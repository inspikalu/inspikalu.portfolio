# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  project(relativePath: String): Project!
  projectConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ProjectFilter): ProjectConnection!
  experience(relativePath: String): Experience!
  experienceConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ExperienceFilter): ExperienceConnection!
}

input DocumentFilter {
  project: ProjectFilter
  experience: ExperienceFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Project | Experience | Folder

type Project implements Node & Document {
  title: String!
  description: String!
  liveUrl: String
  githubUrl: String
  image: String!
  featured: Boolean
  priority: Float
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input ProjectFilter {
  title: StringFilter
  description: StringFilter
  liveUrl: StringFilter
  githubUrl: StringFilter
  image: ImageFilter
  featured: BooleanFilter
  priority: NumberFilter
}

type ProjectConnectionEdges {
  cursor: String!
  node: Project
}

type ProjectConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ProjectConnectionEdges]
}

type Experience implements Node & Document {
  title: String!
  company: String!
  location: String
  startDate: String!
  endDate: String
  current: Boolean
  description: JSON
  tags: [String]
  type: String
  priority: Float
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input ExperienceFilter {
  title: StringFilter
  company: StringFilter
  location: StringFilter
  startDate: DatetimeFilter
  endDate: DatetimeFilter
  current: BooleanFilter
  description: RichTextFilter
  tags: StringFilter
  type: StringFilter
  priority: NumberFilter
}

type ExperienceConnectionEdges {
  cursor: String!
  node: Experience
}

type ExperienceConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ExperienceConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateProject(relativePath: String!, params: ProjectMutation!): Project!
  createProject(relativePath: String!, params: ProjectMutation!): Project!
  updateExperience(relativePath: String!, params: ExperienceMutation!): Experience!
  createExperience(relativePath: String!, params: ExperienceMutation!): Experience!
}

input DocumentUpdateMutation {
  project: ProjectMutation
  experience: ExperienceMutation
  relativePath: String
}

input DocumentMutation {
  project: ProjectMutation
  experience: ExperienceMutation
}

input ProjectMutation {
  title: String
  description: String
  liveUrl: String
  githubUrl: String
  image: String
  featured: Boolean
  priority: Float
}

input ExperienceMutation {
  title: String
  company: String
  location: String
  startDate: String
  endDate: String
  current: Boolean
  description: JSON
  tags: [String]
  type: String
  priority: Float
}

schema {
  query: Query
  mutation: Mutation
}
